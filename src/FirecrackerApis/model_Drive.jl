# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct Drive <: SwaggerModel
    drive_id::Union{ Nothing, String } # drive_id
    path_on_host::Union{ Nothing, String } # path_on_host
    is_root_device::Union{ Nothing, Bool } # is_root_device
    partuuid::Union{ Nothing, String } # partuuid
    is_read_only::Union{ Nothing, Bool } # is_read_only
    rate_limiter::Union{ Nothing, RateLimiter } # rate_limiter

    function Drive(;drive_id=nothing, path_on_host=nothing, is_root_device=nothing, partuuid=nothing, is_read_only=nothing, rate_limiter=nothing)
        o = new()
        set_field!(o, :drive_id, drive_id)
        set_field!(o, :path_on_host, path_on_host)
        set_field!(o, :is_root_device, is_root_device)
        set_field!(o, :partuuid, partuuid)
        set_field!(o, :is_read_only, is_read_only)
        set_field!(o, :rate_limiter, rate_limiter)
        o
    end
end # type Drive

const _name_map_Drive = Dict{String,Symbol}(["drive_id"=>:drive_id, "path_on_host"=>:path_on_host, "is_root_device"=>:is_root_device, "partuuid"=>:partuuid, "is_read_only"=>:is_read_only, "rate_limiter"=>:rate_limiter])
const _field_map_Drive = Dict{Symbol,String}([:drive_id=>"drive_id", :path_on_host=>"path_on_host", :is_root_device=>"is_root_device", :partuuid=>"partuuid", :is_read_only=>"is_read_only", :rate_limiter=>"rate_limiter"])
Swagger.name_map(::Type{ Drive }) = _name_map_Drive
Swagger.field_map(::Type{ Drive }) = _field_map_Drive

function check_required(o::Drive)
    (o.drive_id === nothing) && (return false)
    (o.path_on_host === nothing) && (return false)
    (o.is_root_device === nothing) && (return false)
    (o.is_read_only === nothing) && (return false)
    true
end

function validate_field(o::Drive, name::Symbol, val)
end
